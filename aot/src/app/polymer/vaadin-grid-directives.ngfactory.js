/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '../../../../src/app/polymer/vaadin-grid-directives';
import * as import2 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_VaadinGridChangeEventsAdapterDirective = (function () {
    function Wrapper_VaadinGridChangeEventsAdapterDirective() {
        this._changed = false;
        this.context = new import0.VaadinGridChangeEventsAdapterDirective();
    }
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'columns-changed')) {
            var pd_sub_0 = (this.context._emitChangeEvent('columns', $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_VaadinGridChangeEventsAdapterDirective.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.columnsChange.subscribe(_eventHandler.bind(view, 'columnsChange')));
        }
    };
    return Wrapper_VaadinGridChangeEventsAdapterDirective;
}());
export var Wrapper_VaadinGridNotifyForDiffersDirective = (function () {
    function Wrapper_VaadinGridNotifyForDiffersDirective(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.VaadinGridNotifyForDiffersDirective(p0, p1, p2);
        this._expr_0 = import2.UNINITIALIZED;
        this._expr_1 = import2.UNINITIALIZED;
        this._expr_2 = import2.UNINITIALIZED;
        this._expr_3 = import2.UNINITIALIZED;
    }
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.check_items = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.items = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.check_columns = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.columns = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.check_sortOrder = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.sortOrder = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.check_detailedEvents = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.detailedEvents = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'items-changed')) {
            var pd_sub_0 = (this.context._setValueFromElement('items', $event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'columns-changed')) {
            var pd_sub_1 = (this.context._setValueFromElement('columns', $event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'sort-order-changed')) {
            var pd_sub_2 = (this.context._setValueFromElement('sortOrder', $event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'detailed-events-changed')) {
            var pd_sub_3 = (this.context._setValueFromElement('detailedEvents', $event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    };
    Wrapper_VaadinGridNotifyForDiffersDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_VaadinGridNotifyForDiffersDirective;
}());
export var Wrapper_VaadinGridReloadConfigurationDirective = (function () {
    function Wrapper_VaadinGridReloadConfigurationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.VaadinGridReloadConfigurationDirective(p0, p1);
    }
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_VaadinGridReloadConfigurationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_VaadinGridReloadConfigurationDirective;
}());
export var Wrapper_VaadinGridFormElementDirective = (function () {
    function Wrapper_VaadinGridFormElementDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.VaadinGridFormElementDirective(p0, p1);
    }
    Wrapper_VaadinGridFormElementDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_VaadinGridFormElementDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_VaadinGridFormElementDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_VaadinGridFormElementDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_VaadinGridFormElementDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'valueChange')) {
            var pd_sub_0 = (this.context.onValueChanged($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_VaadinGridFormElementDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_VaadinGridFormElementDirective;
}());
export var Wrapper_VaadinGridValidationDirective = (function () {
    function Wrapper_VaadinGridValidationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.VaadinGridValidationDirective(p0, p1);
    }
    Wrapper_VaadinGridValidationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_VaadinGridValidationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_VaadinGridValidationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_VaadinGridValidationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_VaadinGridValidationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_VaadinGridValidationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_VaadinGridValidationDirective;
}());
//# sourceMappingURL=vaadin-grid-directives.ngfactory.js.map