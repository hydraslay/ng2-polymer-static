/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '../../../../src/app/polymer/paper-menu-directives';
import * as import2 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_PaperMenuChangeEventsAdapterDirective = (function () {
    function Wrapper_PaperMenuChangeEventsAdapterDirective() {
        this._changed = false;
        this.context = new import0.PaperMenuChangeEventsAdapterDirective();
    }
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
        (this.subscription3 && this.subscription3.unsubscribe());
        (this.subscription4 && this.subscription4.unsubscribe());
    };
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'selected-changed')) {
            var pd_sub_0 = (this.context._emitChangeEvent('selected', $event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'selected-item-changed')) {
            var pd_sub_1 = (this.context._emitChangeEvent('selectedItem', $event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'items-changed')) {
            var pd_sub_2 = (this.context._emitChangeEvent('items', $event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'selected-values-changed')) {
            var pd_sub_3 = (this.context._emitChangeEvent('selectedValues', $event) !== false);
            result = (pd_sub_3 && result);
        }
        if ((eventName == 'selected-items-changed')) {
            var pd_sub_4 = (this.context._emitChangeEvent('selectedItems', $event) !== false);
            result = (pd_sub_4 && result);
        }
        return result;
    };
    Wrapper_PaperMenuChangeEventsAdapterDirective.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2, emit3, emit4) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.selectedChange.subscribe(_eventHandler.bind(view, 'selectedChange')));
        }
        if (emit1) {
            (this.subscription1 = this.context.selectedItemChange.subscribe(_eventHandler.bind(view, 'selectedItemChange')));
        }
        if (emit2) {
            (this.subscription2 = this.context.itemsChange.subscribe(_eventHandler.bind(view, 'itemsChange')));
        }
        if (emit3) {
            (this.subscription3 = this.context.selectedValuesChange.subscribe(_eventHandler.bind(view, 'selectedValuesChange')));
        }
        if (emit4) {
            (this.subscription4 = this.context.selectedItemsChange.subscribe(_eventHandler.bind(view, 'selectedItemsChange')));
        }
    };
    return Wrapper_PaperMenuChangeEventsAdapterDirective;
}());
export var Wrapper_PaperMenuNotifyForDiffersDirective = (function () {
    function Wrapper_PaperMenuNotifyForDiffersDirective(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.PaperMenuNotifyForDiffersDirective(p0, p1, p2);
        this._expr_0 = import2.UNINITIALIZED;
        this._expr_1 = import2.UNINITIALIZED;
    }
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.check_selectedValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.selectedValues = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.check_keyEventTarget = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.keyEventTarget = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'selected-values-changed')) {
            var pd_sub_0 = (this.context._setValueFromElement('selectedValues', $event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'key-event-target-changed')) {
            var pd_sub_1 = (this.context._setValueFromElement('keyEventTarget', $event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_PaperMenuNotifyForDiffersDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperMenuNotifyForDiffersDirective;
}());
export var Wrapper_PaperMenuReloadConfigurationDirective = (function () {
    function Wrapper_PaperMenuReloadConfigurationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperMenuReloadConfigurationDirective(p0, p1);
    }
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PaperMenuReloadConfigurationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperMenuReloadConfigurationDirective;
}());
export var Wrapper_PaperMenuFormElementDirective = (function () {
    function Wrapper_PaperMenuFormElementDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperMenuFormElementDirective(p0, p1);
    }
    Wrapper_PaperMenuFormElementDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperMenuFormElementDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperMenuFormElementDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperMenuFormElementDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperMenuFormElementDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'valueChange')) {
            var pd_sub_0 = (this.context.onValueChanged($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_PaperMenuFormElementDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperMenuFormElementDirective;
}());
export var Wrapper_PaperMenuValidationDirective = (function () {
    function Wrapper_PaperMenuValidationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperMenuValidationDirective(p0, p1);
    }
    Wrapper_PaperMenuValidationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperMenuValidationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperMenuValidationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_PaperMenuValidationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperMenuValidationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PaperMenuValidationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperMenuValidationDirective;
}());
//# sourceMappingURL=paper-menu-directives.ngfactory.js.map