/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../src/app/polymer/paper-menu-button-directives';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_PaperMenuButtonChangeEventsAdapterDirective {
  /*private*/ _eventHandler:Function;
  context:import0.PaperMenuButtonChangeEventsAdapterDirective;
  /*private*/ _changed:boolean;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  constructor() {
    this._changed = false;
    this.context = new import0.PaperMenuButtonChangeEventsAdapterDirective();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'focused-changed')) {
      const pd_sub_0:any = ((<any>this.context._emitChangeEvent('focused',$event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'disabled-changed')) {
      const pd_sub_1:any = ((<any>this.context._emitChangeEvent('disabled',$event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'opened-changed')) {
      const pd_sub_2:any = ((<any>this.context._emitChangeEvent('opened',$event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'horizontal-offset-changed')) {
      const pd_sub_3:any = ((<any>this.context._emitChangeEvent('horizontalOffset',$event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'vertical-offset-changed')) {
      const pd_sub_4:any = ((<any>this.context._emitChangeEvent('verticalOffset',$event)) !== false);
      result = (pd_sub_4 && result);
    }
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.focusedChange.subscribe(_eventHandler.bind(view,'focusedChange'))); }
    if (emit1) { (this.subscription1 = this.context.disabledChange.subscribe(_eventHandler.bind(view,'disabledChange'))); }
    if (emit2) { (this.subscription2 = this.context.openedChange.subscribe(_eventHandler.bind(view,'openedChange'))); }
    if (emit3) { (this.subscription3 = this.context.horizontalOffsetChange.subscribe(_eventHandler.bind(view,'horizontalOffsetChange'))); }
    if (emit4) { (this.subscription4 = this.context.verticalOffsetChange.subscribe(_eventHandler.bind(view,'verticalOffsetChange'))); }
  }
}
export class Wrapper_PaperMenuButtonNotifyForDiffersDirective {
  /*private*/ _eventHandler:Function;
  context:import0.PaperMenuButtonNotifyForDiffersDirective;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.PaperMenuButtonNotifyForDiffersDirective(p0,p1,p2);
    this._expr_0 = import2.UNINITIALIZED;
    this._expr_1 = import2.UNINITIALIZED;
    this._expr_2 = import2.UNINITIALIZED;
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_keyEventTarget(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.keyEventTarget = currValue;
      this._expr_0 = currValue;
    }
  }
  check_openAnimationConfig(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.openAnimationConfig = currValue;
      this._expr_1 = currValue;
    }
  }
  check_closeAnimationConfig(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.closeAnimationConfig = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'key-event-target-changed')) {
      const pd_sub_0:any = ((<any>this.context._setValueFromElement('keyEventTarget',$event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'open-animation-config-changed')) {
      const pd_sub_1:any = ((<any>this.context._setValueFromElement('openAnimationConfig',$event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'close-animation-config-changed')) {
      const pd_sub_2:any = ((<any>this.context._setValueFromElement('closeAnimationConfig',$event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_PaperMenuButtonReloadConfigurationDirective {
  /*private*/ _eventHandler:Function;
  context:import0.PaperMenuButtonReloadConfigurationDirective;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.PaperMenuButtonReloadConfigurationDirective(p0,p1);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_PaperMenuButtonFormElementDirective {
  /*private*/ _eventHandler:Function;
  context:import0.PaperMenuButtonFormElementDirective;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.PaperMenuButtonFormElementDirective(p0,p1);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'valueChange')) {
      const pd_sub_0:any = ((<any>this.context.onValueChanged($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_PaperMenuButtonValidationDirective {
  /*private*/ _eventHandler:Function;
  context:import0.PaperMenuButtonValidationDirective;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.PaperMenuButtonValidationDirective(p0,p1);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { this.context.ngDoCheck(); }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}