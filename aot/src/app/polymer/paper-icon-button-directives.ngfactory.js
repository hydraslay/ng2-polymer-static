/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '../../../../src/app/polymer/paper-icon-button-directives';
import * as import2 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_PaperIconButtonChangeEventsAdapterDirective = (function () {
    function Wrapper_PaperIconButtonChangeEventsAdapterDirective() {
        this._changed = false;
        this.context = new import0.PaperIconButtonChangeEventsAdapterDirective();
    }
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    };
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'active-changed')) {
            var pd_sub_0 = (this.context._emitChangeEvent('active', $event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'focused-changed')) {
            var pd_sub_1 = (this.context._emitChangeEvent('focused', $event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'disabled-changed')) {
            var pd_sub_2 = (this.context._emitChangeEvent('disabled', $event) !== false);
            result = (pd_sub_2 && result);
        }
        return result;
    };
    Wrapper_PaperIconButtonChangeEventsAdapterDirective.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.activeChange.subscribe(_eventHandler.bind(view, 'activeChange')));
        }
        if (emit1) {
            (this.subscription1 = this.context.focusedChange.subscribe(_eventHandler.bind(view, 'focusedChange')));
        }
        if (emit2) {
            (this.subscription2 = this.context.disabledChange.subscribe(_eventHandler.bind(view, 'disabledChange')));
        }
    };
    return Wrapper_PaperIconButtonChangeEventsAdapterDirective;
}());
export var Wrapper_PaperIconButtonNotifyForDiffersDirective = (function () {
    function Wrapper_PaperIconButtonNotifyForDiffersDirective(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.PaperIconButtonNotifyForDiffersDirective(p0, p1, p2);
        this._expr_0 = import2.UNINITIALIZED;
    }
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.check_keyEventTarget = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.keyEventTarget = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'key-event-target-changed')) {
            var pd_sub_0 = (this.context._setValueFromElement('keyEventTarget', $event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_PaperIconButtonNotifyForDiffersDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperIconButtonNotifyForDiffersDirective;
}());
export var Wrapper_PaperIconButtonReloadConfigurationDirective = (function () {
    function Wrapper_PaperIconButtonReloadConfigurationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperIconButtonReloadConfigurationDirective(p0, p1);
    }
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PaperIconButtonReloadConfigurationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperIconButtonReloadConfigurationDirective;
}());
export var Wrapper_PaperIconButtonFormElementDirective = (function () {
    function Wrapper_PaperIconButtonFormElementDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperIconButtonFormElementDirective(p0, p1);
    }
    Wrapper_PaperIconButtonFormElementDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperIconButtonFormElementDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperIconButtonFormElementDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_PaperIconButtonFormElementDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperIconButtonFormElementDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'valueChange')) {
            var pd_sub_0 = (this.context.onValueChanged($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_PaperIconButtonFormElementDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperIconButtonFormElementDirective;
}());
export var Wrapper_PaperIconButtonValidationDirective = (function () {
    function Wrapper_PaperIconButtonValidationDirective(p0, p1) {
        this._changed = false;
        this.context = new import0.PaperIconButtonValidationDirective(p0, p1);
    }
    Wrapper_PaperIconButtonValidationDirective.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PaperIconButtonValidationDirective.prototype.ngOnDestroy = function () {
    };
    Wrapper_PaperIconButtonValidationDirective.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_PaperIconButtonValidationDirective.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PaperIconButtonValidationDirective.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PaperIconButtonValidationDirective.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PaperIconButtonValidationDirective;
}());
//# sourceMappingURL=paper-icon-button-directives.ngfactory.js.map